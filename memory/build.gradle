/*
 MIT License
 https://opensource.org/licenses/MIT
 Copyright 2020 Lukasz Machowski

 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

plugins {
    // Define this as a Java Library:
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id 'java-library'
    id("maven-publish")

    // Instructions to publish to Maven Central:
    // https://central.sonatype.org/pages/gradle.html
    //apply plugin: 'maven'
    //apply plugin: 'signing'
    // Using the example from here: https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example
    id('maven')

    // https://central.sonatype.org/pages/gradle.html
    id('signing')
}

// Define the details of this artifact:
def libraryArtifactID = 'nanovc-memory';
def libraryName = 'Nano Version Control In-Memory Implementation'
def libraryDescription = 'The Nano Version Control Library implemented in Memory'


dependencies {
    api project(':nanovc-api')
    // implementation: ''
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

// Instructions for publishing to Maven Central for Gradle:
//https://central.sonatype.org/pages/gradle.html
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

archivesBaseName = libraryArtifactID


// Make sure we publish Javadoc and Sources:
// https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example
java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


publishing {
    repositories {
        // From Git Hub Packages documentation:
        // https://help.github.com/en/packages/publishing-and-managing-packages/publishing-a-package
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nanovc/nanovc-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }

        // From maven-publish documentation:
        // https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example
        maven {
            name = "MavenCentralStaging"
            // The following details were provided when registering our repository with OSSRH:
            // https://issues.sonatype.org/browse/OSSRH-58246
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername // Defined in gradle.properties
                password = ossrhPassword // Defined in gradle.properties
            }
        }
    }
    publications {
        // From Git Hub Packages documentation:
        // https://help.github.com/en/packages/publishing-and-managing-packages/publishing-a-package
        gpr(MavenPublication) {
            from(components.java)
        }


        // From maven-publish documentation:
        // https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example
        mavenCentralJava(MavenPublication) {
            artifactId = libraryArtifactID
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = libraryName
                description = libraryDescription
                url = 'http://nanovc.io'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'lukaszmac'
                        name = 'Lukasz Machowski'
                        email = 'nanovc@outlook.com'
                        url = 'www.linkedin.com/in/lukasz-machowski-05a0a51'
                        organization = 'Synthesis Software Technologies'
                        organizationUrl = 'https://www.synthesis.co.za/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/nanovc/nanovc-java.git'
                    developerConnection = 'scm:git:ssh://github.com/nanovc/nanovc-java.git'
                    url = 'https://github.com/nanovc/nanovc-java'
                }
            }
        }
    }
}

// From maven-publish documentation:
// https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example
signing {
    sign publishing.publications.mavenCentralJava

    // Instructions for publishing to Maven Central for Gradle:
    //https://central.sonatype.org/pages/gradle.html
    sign configurations.archives
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


// Instructions for publishing to Maven Central for Gradle:
//https://central.sonatype.org/pages/gradle.html
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = libraryName
                description = libraryDescription
                url = 'http://nanovc.io'
                packaging 'jar'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'lukaszmac'
                        name = 'Lukasz Machowski'
                        email = 'nanovc@outlook.com'
                        url = 'www.linkedin.com/in/lukasz-machowski-05a0a51'
                        organization = 'Synthesis Software Technologies'
                        organizationUrl = 'https://www.synthesis.co.za/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/nanovc/nanovc-java.git'
                    developerConnection = 'scm:git:ssh://github.com/nanovc/nanovc-java.git'
                    url = 'https://github.com/nanovc/nanovc-java'
                }

            }
        }
    }
}
